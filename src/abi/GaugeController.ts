const GaugeController = [
  {
    type: 'function',
    name: 'EPOCH_LENGTH',
    inputs: [],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'UPGRADE_INTERFACE_VERSION',
    inputs: [],
    outputs: [{ name: '', type: 'string', internalType: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'accountPowerUsedPerEpoch',
    inputs: [
      { name: '', type: 'uint256', internalType: 'uint256' },
      { name: '', type: 'bytes32', internalType: 'bytes32' },
    ],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'addGauge',
    inputs: [
      {
        name: '_gaugeInfo',
        type: 'tuple',
        internalType: 'struct GaugeInfo',
        components: [
          { name: 'chainId', type: 'uint256', internalType: 'uint256' },
          {
            name: 'baseReward',
            type: 'uint256',
            internalType: 'uint256',
          },
          { name: 'gaugeType', type: 'uint8', internalType: 'uint8' },
          {
            name: 'gaugeAddress',
            type: 'address',
            internalType: 'address',
          },
        ],
      },
    ],
    outputs: [{ name: 'id', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'authority',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'bridgeAdapters',
    inputs: [{ name: '', type: 'address', internalType: 'address' }],
    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'computeRewards',
    inputs: [
      { name: '_id', type: 'bytes32', internalType: 'bytes32' },
      { name: '_epoch', type: 'uint256', internalType: 'uint256' },
    ],
    outputs: [{ name: 'reward', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'epoch',
    inputs: [],
    outputs: [{ name: '_epoch', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'epochFinalized',
    inputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    outputs: [{ name: '', type: 'bool', internalType: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'finalizeEpoch',
    inputs: [{ name: '_epoch', type: 'uint256', internalType: 'uint256' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'gaugePowersPerEpoch',
    inputs: [
      { name: '', type: 'uint256', internalType: 'uint256' },
      { name: '', type: 'bytes32', internalType: 'bytes32' },
    ],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'gauges',
    inputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [
      { name: 'chainId', type: 'uint256', internalType: 'uint256' },
      { name: 'baseReward', type: 'uint256', internalType: 'uint256' },
      { name: 'gaugeType', type: 'uint8', internalType: 'uint8' },
      { name: 'gaugeAddress', type: 'address', internalType: 'address' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'genesis',
    inputs: [],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'initialize',
    inputs: [
      { name: '_syk', type: 'address', internalType: 'address' },
      { name: '_xSyk', type: 'address', internalType: 'address' },
      {
        name: '_xSykStaking',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_initialAuthority',
        type: 'address',
        internalType: 'address',
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'isConsumingScheduledOp',
    inputs: [],
    outputs: [{ name: '', type: 'bytes4', internalType: 'bytes4' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'proxiableUUID',
    inputs: [],
    outputs: [{ name: '', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'pull',
    inputs: [
      {
        name: '_pullParams',
        type: 'tuple',
        internalType: 'struct PullParams',
        components: [
          { name: 'epoch', type: 'uint256', internalType: 'uint256' },
          { name: 'gaugeId', type: 'bytes32', internalType: 'bytes32' },
          {
            name: 'gaugeAddress',
            type: 'address',
            internalType: 'address',
          },
        ],
      },
    ],
    outputs: [{ name: 'reward', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'removeGauge',
    inputs: [{ name: '_gaugeId', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setAuthority',
    inputs: [{ name: 'newAuthority', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setGenesis',
    inputs: [{ name: '_genesis', type: 'uint256', internalType: 'uint256' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setTotalRewardPerEpoch',
    inputs: [
      {
        name: '_totalRewardPerEpoch',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'syk',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'totalBaseReward',
    inputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'totalBaseRewardPerEpoch',
    inputs: [],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'totalPowerUsedPerEpoch',
    inputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'totalReward',
    inputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'totalRewardPerEpoch',
    inputs: [],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'totalVoteableReward',
    inputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'totalVoteableRewardPerEpoch',
    inputs: [],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'updateBridgeAdapter',
    inputs: [
      {
        name: '_bridgeAdapter',
        type: 'address',
        internalType: 'address',
      },
      { name: '_add', type: 'bool', internalType: 'bool' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'updateXSykStaking',
    inputs: [{ name: '_xSykStaking', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'upgradeToAndCall',
    inputs: [
      {
        name: 'newImplementation',
        type: 'address',
        internalType: 'address',
      },
      { name: 'data', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'vote',
    inputs: [
      {
        name: '_voteParams',
        type: 'tuple',
        internalType: 'struct VoteParams',
        components: [
          { name: 'power', type: 'uint256', internalType: 'uint256' },
          {
            name: 'totalPower',
            type: 'uint256',
            internalType: 'uint256',
          },
          { name: 'epoch', type: 'uint256', internalType: 'uint256' },
          { name: 'gaugeId', type: 'bytes32', internalType: 'bytes32' },
          {
            name: 'accountId',
            type: 'bytes32',
            internalType: 'bytes32',
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'xSyk',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'xSykStaking',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'event',
    name: 'AuthorityUpdated',
    inputs: [
      {
        name: 'authority',
        type: 'address',
        indexed: false,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'BridgeAdapterUpdated',
    inputs: [
      {
        name: 'bridgeAdapter',
        type: 'address',
        indexed: false,
        internalType: 'address',
      },
      {
        name: 'add',
        type: 'bool',
        indexed: false,
        internalType: 'bool',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'GaugeAdded',
    inputs: [
      {
        name: 'gaugeInfo',
        type: 'tuple',
        indexed: false,
        internalType: 'struct GaugeInfo',
        components: [
          { name: 'chainId', type: 'uint256', internalType: 'uint256' },
          {
            name: 'baseReward',
            type: 'uint256',
            internalType: 'uint256',
          },
          { name: 'gaugeType', type: 'uint8', internalType: 'uint8' },
          {
            name: 'gaugeAddress',
            type: 'address',
            internalType: 'address',
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'GaugeRemoved',
    inputs: [
      {
        name: 'gaugeInfo',
        type: 'tuple',
        indexed: false,
        internalType: 'struct GaugeInfo',
        components: [
          { name: 'chainId', type: 'uint256', internalType: 'uint256' },
          {
            name: 'baseReward',
            type: 'uint256',
            internalType: 'uint256',
          },
          { name: 'gaugeType', type: 'uint8', internalType: 'uint8' },
          {
            name: 'gaugeAddress',
            type: 'address',
            internalType: 'address',
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'Initialized',
    inputs: [
      {
        name: 'version',
        type: 'uint64',
        indexed: false,
        internalType: 'uint64',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'RewardPulled',
    inputs: [
      {
        name: 'pullParams',
        type: 'tuple',
        indexed: false,
        internalType: 'struct PullParams',
        components: [
          { name: 'epoch', type: 'uint256', internalType: 'uint256' },
          { name: 'gaugeId', type: 'bytes32', internalType: 'bytes32' },
          {
            name: 'gaugeAddress',
            type: 'address',
            internalType: 'address',
          },
        ],
      },
      {
        name: 'reward',
        type: 'uint256',
        indexed: false,
        internalType: 'uint256',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'SetTotalRewardsPerEpoch',
    inputs: [
      {
        name: 'totalRewardsPerEpoch',
        type: 'uint256',
        indexed: false,
        internalType: 'uint256',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'Upgraded',
    inputs: [
      {
        name: 'implementation',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'Voted',
    inputs: [
      {
        name: 'voteParams',
        type: 'tuple',
        indexed: false,
        internalType: 'struct VoteParams',
        components: [
          { name: 'power', type: 'uint256', internalType: 'uint256' },
          {
            name: 'totalPower',
            type: 'uint256',
            internalType: 'uint256',
          },
          { name: 'epoch', type: 'uint256', internalType: 'uint256' },
          { name: 'gaugeId', type: 'bytes32', internalType: 'bytes32' },
          {
            name: 'accountId',
            type: 'bytes32',
            internalType: 'bytes32',
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: 'error',
    name: 'AccessManagedInvalidAuthority',
    inputs: [{ name: 'authority', type: 'address', internalType: 'address' }],
  },
  {
    type: 'error',
    name: 'AccessManagedRequiredDelay',
    inputs: [
      { name: 'caller', type: 'address', internalType: 'address' },
      { name: 'delay', type: 'uint32', internalType: 'uint32' },
    ],
  },
  {
    type: 'error',
    name: 'AccessManagedUnauthorized',
    inputs: [{ name: 'caller', type: 'address', internalType: 'address' }],
  },
  {
    type: 'error',
    name: 'AddressEmptyCode',
    inputs: [{ name: 'target', type: 'address', internalType: 'address' }],
  },
  {
    type: 'error',
    name: 'AddressInsufficientBalance',
    inputs: [{ name: 'account', type: 'address', internalType: 'address' }],
  },
  {
    type: 'error',
    name: 'ERC1967InvalidImplementation',
    inputs: [
      {
        name: 'implementation',
        type: 'address',
        internalType: 'address',
      },
    ],
  },
  { type: 'error', name: 'ERC1967NonPayable', inputs: [] },
  { type: 'error', name: 'FailedInnerCall', inputs: [] },
  { type: 'error', name: 'GaugeController_EpochActive', inputs: [] },
  {
    type: 'error',
    name: 'GaugeController_EpochNotFinalized',
    inputs: [],
  },
  { type: 'error', name: 'GaugeController_GaugeNotFound', inputs: [] },
  { type: 'error', name: 'GaugeController_IncorrectEpoch', inputs: [] },
  { type: 'error', name: 'GaugeController_InvalidGauge', inputs: [] },
  {
    type: 'error',
    name: 'GaugeController_NotEnoughPowerAvailable',
    inputs: [],
  },
  {
    type: 'error',
    name: 'GaugeController_NotEnoughRewardAvailable',
    inputs: [],
  },
  { type: 'error', name: 'GaugeController_NotGauge', inputs: [] },
  {
    type: 'error',
    name: 'GaugeController_RewardAlreadyPulled',
    inputs: [],
  },
  { type: 'error', name: 'InvalidInitialization', inputs: [] },
  { type: 'error', name: 'NotInitializing', inputs: [] },
  {
    type: 'error',
    name: 'SafeERC20FailedOperation',
    inputs: [{ name: 'token', type: 'address', internalType: 'address' }],
  },
  { type: 'error', name: 'UUPSUnauthorizedCallContext', inputs: [] },
  {
    type: 'error',
    name: 'UUPSUnsupportedProxiableUUID',
    inputs: [{ name: 'slot', type: 'bytes32', internalType: 'bytes32' }],
  },
] as const;

export default GaugeController;
